Next releases:
  1. Add tier/related prototype smart randomization (prototypes in the same "class" get randomized to be "different enough")

  - Investigate which entities take pollution and how
  - Add balancing (for properties that can be balanced)
    * Maybe a "karma system"? But how to order how the karmas are dished out?
    * Idea: add all table + properties to be randomized to a list, then randomly pick things from said list to randomize until it's empty, and also include the other parameters for randomization, like the function to use (heck, maybe even just store the individual functions and parameters!)
    * Add individual prototype karma too so individual prototypes don't get too unbalanced
  - Find a more general/better way to deal with vast lists of entities
  - Test mod compatibility
  - Do special evaluation of the "importance" of items to randomize their crafting times more effectively
  - In-game tutorial/tooltips for more obscure randomizations
  - Refactor so that each function called in data-final-fixes uses each prototype exactly once
  - Randomly randomized mode where which settings are randomized is randomized

  - Randomize where productivity modules can go (figure out how to do this in a smart way)
  - Randomize biter spawner in a smarter fashion
  - Learn about fluid boxes and randomize those
  - Randomize collision boxes (do more carefully than before, like also changing graphics)
  - Game properties randomly change mid-game
  - Electric Miner base productivity
  - Entities are randomly not minable
  - Shuffle damage types (advanced randomization)
  - Recipes randomly require water
  - Crafting times less variance for items need for science
  - Sample from gamma distribution for simpler properties
  - Use local functions instead of globals
  - Fast replaceable group and next_upgrade - use to determine things of the same type and the tiers
  - Player chooses between different prototypes
  - Find similar type entities in a better way
  - Fix where min/max is passed
  - Randomize research
  - Link inserters (specifically, filter inserters should be hard linked)
  - Better rounding
  - Account for efficiency when rounding energy_used for furnaces (and other such objects)
  - Finish adding rounding paramaters in randomizers!
  - Round min consumption
  - Combine modulus and leftdigitstokeep
  - Figure out why pumping_speed was zero

Organization
  - Insert {randomization_function, prototype, property} tables into randomizing_functions_to_call instead of just functions to call
  - Make a proper readme

Random maps
  - Randomize enemy evolution parameters
  - Randomize pollution parameters

Configuration options
  - Sync belt tiers option
  - Add option for variance

Properties:
  - vector_to_place_result for mining drill
  - Biter pollution absorbed
  - emissions_per_second
  - healing_per_tick
  - fuel_acceleration/top-speed multiplier (randomize with vehicles)
  - braking_power/braking_force
  - electric pole wire connection points (so it's possible electric poles connect to fewer electrical poles than before)

Silly additions
  - Figure out a way to randomize sounds or graphics?
  - Randomize what rocks drop
  - Mining ores gives you random items sometimes (a random other ore?)
    - Maybe to make it not just dangoreus lite, it gives something like the smelted version? Or something else that adds more complications than something you just throw into some chests?
  - Mining a building can, with a small chance, give you another building of the same "type"
  - Biters randomly spawn across the map (possibly even in your base)
  - Randomize collision masks
  - Randomize map colors for entities
  - Properties are randomized based on where the entity is located
  - Properties get re-randomized after each rocket launch
  - Weird things can take modules, like electric poles? Enemy spawners? Inserters?

Ways to link randomizations:
  - Randomize group and individual prototypes
  - Randomize, then order correctly
  - During randomization, implement a "push" from lower/upper prototypes
  - After randomization, have a step where we force things apart